name: Test, Convert, and Deploy Detection Rules

on:
  push:
    branches:
      - dev

permissions:
  contents: write

jobs:
  test-convert-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Setup Python environment
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip

    - name: Install Sigma dependencies
      run: |
        pip install pySigma sigmatools pyyaml elasticsearch click pytest requests

    - name: Validate Sigma Rules
      run: |
        python3 ci-scripts/validate-rule.py || exit 1

    - name: Convert Sigma Rules
      run: |
        python3 ci-scripts/convert_sigma.py

    - name: Test Converted Rules
      env:
        ELASTIC_URL: ${{ secrets.ELASTIC_URL }}
        ELASTIC_API_KEY: ${{ secrets.ELASTIC_API_KEY }}
      if: env.ELASTIC_URL != '' && env.ELASTIC_API_KEY != ''
      run: |
        python3 ci-scripts/test_rules.py || exit 1

    - name: Deploy Rules to Elasticsearch
      if: success()
      env:
        ELASTIC_URL: ${{ secrets.ELASTIC_URL }}
        ELASTIC_API_KEY: ${{ secrets.ELASTIC_API_KEY }}
      run: |
        for rule_file in converted_rules/*.json; do
          curl -X POST "${ELASTIC_URL}/api/detection_engine/rules" \
            -H "Authorization: ApiKey ${ELASTIC_API_KEY}" \
            -H "Content-Type: application/json" \
            -d "@${rule_file}" || exit 1
        done

    - name: Notify Success
      if: success()
      run: echo "All Sigma rules passed testing and deployed successfully."

    - name: Merge dev into main
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "hanchangmeo"
        git config --global user.email "hanchiangzo@gmail.com"
        git fetch origin
        git checkout main
        if git diff --name-only origin/main...origin/dev | grep '^rules/'; then
          git checkout dev -- rules/
          git add rules/
          git commit -m "Merge updated rules from dev to main"
          git push origin main
        else
          echo "No changes in rules detected. Skipping merge."
        fi

    - name: Notify Failure
      if: failure()
      run: echo "Workflow failed at some step. Check logs for details."
